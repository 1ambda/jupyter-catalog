buildscript {
    ext {
        springBootVersion = '2.1.8.RELEASE'
        gradleAptVersion = '0.19'
        owaspVersion = '3.3.1'
        queryDslPluginVersion = '1.0.10'
        sonarQubeVersion = '2.6.2'
        propdepsVersion = '0.0.9.RELEASE'
        shadowVersion = '4.0.2'
        gradleTestLoggerVersion = '1.6.0'
        gradleScalaTestVersion = '0.19'
        gradleVersioningPluginVersion = '2.8.2'
        lombokPluginVersion = '3.1.0'
        jibPluginVersion = '1.3.0'
        kotlinPluginVersion = '1.3.41'
    }

    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url 'https://repo.spring.io/plugins-release' }
        maven { url 'http://oss.jfrog.org/artifactory/oss-snapshot-local/' }

    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("net.ltgt.gradle:gradle-apt-plugin:${gradleAptVersion}")
        classpath("org.owasp:dependency-check-gradle:${owaspVersion}")
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:${sonarQubeVersion}"
        classpath "io.spring.gradle:propdeps-plugin:${propdepsVersion}"
        classpath "com.github.jengelman.gradle.plugins:shadow:${shadowVersion}"
        classpath "com.adarshr:gradle-test-logger-plugin:${gradleTestLoggerVersion}"
        classpath "gradle.plugin.net.nemerosa:versioning:${gradleVersioningPluginVersion}"
        classpath "gradle.plugin.com.ewerk.gradle.plugins:querydsl-plugin:${queryDslPluginVersion}"
        classpath("io.franzbecker:gradle-lombok:${lombokPluginVersion}")
        classpath "gradle.plugin.com.google.cloud.tools:jib-gradle-plugin:${jibPluginVersion}"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinPluginVersion}"
    }
}

allprojects {
    apply plugin: 'idea'
    apply plugin: 'java'
    apply plugin: 'com.adarshr.test-logger'

    repositories {
        mavenCentral()
        maven { url "http://jcenter.bintray.com" }
    }

    idea {
        module {
            sourceDirs += file('out/production/classes/generated/')
            // generatedSourceDirs += file('out/production/classes/generated/')
        }
    }

    testlogger {
        theme 'standard'
        showExceptions true
        slowThreshold 10000
        showSummary true
        showPassed true
        showSkipped true
        showFailed true
        showStandardStreams false
        showPassedStandardStreams true
        showSkippedStandardStreams true
        showFailedStandardStreams true
    }


    ext {
        // :module-api-swagger
        swagger2AnnotationVersion = '1.5.23'
        swagger3AnnotationVersion = '2.0.9'
        jacksonJsr310Version = '2.9.7'

        feignVersion = '9.7.0'
        feignFormVersion = '3.8.0'
        oltuVersion = '1.0.2'
        migbase64Version = '2.2'

        // common
        javaxValidationVersion = '2.0.1.Final'
        guavaVersion = '26.0-jre'
        springBootAdminVersion = '2.1.6'
        micrometerVersion = '1.0.6'
        springfoxVersion = '2.9.2'
        logbookVersion = '1.13.1'
        jjwtVersion = '0.9.1'

        // logging
        logbackEncoderVersion = '6.1'
        logbackVersion = '1.2.3'

        // aws
        awsSdkVersion = '1.11.547'

        // storage, repository
        prestoVersion = '0.219'
        mysqlConnectorVersion = '8.0.13'
        h2Version = '1.4.199'
        flywayVersion = '5.2.4'
        springKafkaVersion = '2.2.0.RELEASE'
        springDataLdapVersion = '2.1.8.RELEASE'

        // test
        testcontainersVersion = '1.10.1'

        // code generation related
        lombokVersion = "1.18.8"
        queryDslVersion = '4.2.1'
        hibernateModelGenVersion = '5.4.1.Final'

        // kotlin
        kotlinVersion = '1.3.41'

        // test
        junitVersion = '5.5.2'
        assertJVersion = '3.13.2'
        mockitoVersion = '3.0.7'
    }
}

subprojects {
    apply plugin: 'org.owasp.dependencycheck'
    apply plugin: 'org.sonarqube'

    project.group = 'io.github.jupyter.catalog'

    targetCompatibility = 1.8
    sourceCompatibility = 1.8
    [compileJava, compileTestJava]*.options.collect {
        options -> options.encoding = 'UTF-8'
    }

    if (project.name == 'module-core-jdbc' || project.name == 'service-catalog-api') {

        apply plugin: 'io.spring.dependency-management'
        apply plugin: 'io.franzbecker.gradle-lombok'

        dependencies {
            // common
            compile("com.google.guava:guava:${guavaVersion}")
            compile("javax.validation:validation-api:${javaxValidationVersion}")

            // spring
            compile 'org.springframework.boot:spring-boot-starter'
            compile('org.springframework.boot:spring-boot-starter-actuator')
            runtime('org.springframework.boot:spring-boot-devtools')

            // code generation
            compileOnly("org.projectlombok:lombok:${lombokVersion}")
            testCompile("org.projectlombok:lombok:${lombokVersion}")

            // test
            testCompile 'org.springframework.boot:spring-boot-starter-test'
            testCompile("org.testcontainers:testcontainers:${testcontainersVersion}")
            testCompile("org.testcontainers:kafka:${testcontainersVersion}")
        }

        dependencyManagement {
            imports {
                mavenBom "org.springframework.boot:spring-boot-dependencies:$springBootVersion"
            }
        }
    }

    task wrapper(type: Wrapper) {
        gradleVersion = '5.4.1'
    }

    sonarqube {
        properties {
            if (project.hasProperty('groupName')) {
                property 'sonar.projectKey', project.property('groupName') + ':' + project.name
            }
        }
    }
}